/* =====================
   Fichier INPUT de test 
   ===================== */

// ===========================================
// Gestion des erreurs de syntaxes et de types

int j = 15 + 3;
if (j < 20) then {
    int newJ = 60;
}

newJ = 25; // <<< Doit générer une erreur : "Non déclarée"

int tititi[4+2+1+2+33..b] = 6; // << Erreur, Pas d'affectation dans un intervalle

int i;
char c = 'a';
i = j;
i = true + 7; // Erreur car Opération arithmétique avec un Booléen

// Erreur de syntaxe
int err = 666 
int err2 = 999;

// Erreur de syntaxe
err2 = = 62;

// Erreur procédure non déclarée
tyty(e);

// Appel récursif impossible
def tyty (a) {
    a = k;
    tutu(a, 10);
}

// Gestion des blocs et de la portée des variables (et de leur redéfinition)

int o = 1;
{
    int o = 2;
    {
        int o = 3;
        {
            int o = 4;
            {

                int o = 5;
                int o = 5;
            }
        }
    }
}


// ==============================================
// La gestion des commentaires est Operationnelle

// ============================================
// Déclaration de variables typées statiquement

int x = 22;

int var_int = 1 + 2 * 2 / 3;
real var_real = (3 % 2) + 47 / 5.6;
bool var_bool = 1 < 2 + 3 + 4;

short sh = -8;
unsigned short ush = 95;
int ii = 65535;
real jj = 14.312465;
unsigned int u = 13;
unsigned real ur = 15.36;

// Multi-déclaration
int var1, var2, var3;

// ==========================
// Gestion des entiers signés

var_int = -69 + -42;

// ==============================
// Gestion des entiers non signés

int var_int2 = 666 * 10;

// ====================
// Gestion des booléens

var_bool = 6 < 9;
var_bool = true;
var_bool = !true;
var_bool = false;

// ======================
// Gestion des caractères

char var_char2 = 'a';

// =================
// Gestion des réels

var_real = 1.6 * 4.2;

// ========================
// Gestion des énumérations

enum couleur { blanc, noir };

// ========================
// Gestion des intervalles

int tata[4+2+1+2+33..b];

// ========================
// Gestion des chaines de caractères

char cc = 'Q';
string str = "blablabla";

// ========================
// Gestion des tableaux à 1 dimension

int tab[2] = 66;

// ========================
// Gestion des pointeurs

real bibi = 69;
char xx = 'x';

pointer real realpointer = &xx;  // <<< Mauvaise affectation
pointer real bibiPOINTER = &bibi;
pointer real newBibi = *bibiPOINTER;

// ================================================
// Gestion des opérations arithmétiques et logiques

real var_real2 = (3 % 2) + 47 / 5.6 * 15;
var_bool = 1 < 2 > (3 + 4);

// ===============================
// Les déclarations des procédures

// Appel récursif possible
def toto (a, q) {
    a = k;
    toto(q, 26);
} return k;

// ========================
// Les appels de procédures

toto(3,3,6,k-j);

// Affectation de la valeur de retour 
// d'une procedure dans une variable
i = tyty(39); 

// ================
// Les affectations

int var_int_new = 1 + 2 * 2 / 3;
real var_real_new = (3 % 2) + 47 / 5.6;
bool var_bool_new = 1 < 2 + 3 + 4;

// =========
// Les tests
if(1 < 2) then
	var_int_new = 72 + 3;
else
	var_int_new = 29;

if(var_int_new < 447) then
	var_int_new = 447;

// ===========
// Les boucles

i = 22;

for(i = 44; i > 22; i = i - 1)
	int var_int_new3 = 12;


for(i = 44; i > 22;) {
	int var_int_new3 = 12;
}

while (var_bool_new || 6)
	int var_int_new3 = var_int_new3 + 1;

do {
    i = k + 1;
} while (var_bool_new);

// =========
// Les blocs

if(2 < 1) then {
	var_int_new = 666;
} else if(4 >= 1) then {
	var_int_new = 999;
}

int uuu = 3;
{
    int uuu = 4;
    {
        int uuu = 5;
    }
}

/* ============================= */
