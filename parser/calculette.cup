import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;

parser code {: // ajout de variables ou surcharge de methodes
    public List<Type> declVars;
    public List<Type> usedVars;
    public List<Integer> tabLengths;
    public int deepness;
:}

action code {: // methodes utiles pour les actions associees Ã  la grammaire
    public void defineType(List<Type> list, EnumType type) {
        for (Type t : list)
            t.setType(type);
    }

    public Type addVar(List<Type> list, String name, List<Integer> tabLengths) {
        Type res = new Type(name, tabLengths);
        list.add(res);
        tabLengths.clear();
        return res;
    }

    public Type getVar(List<Type> list, String name) {
        for(Type t: list)
            if (t.getName().equals(name))
                return t;
        return null;
    }

    public boolean isDecl(String var, List<Type> declVars) {
        for(Type t: declVars)
            if (t.getName().equals(var))
                return true;
        return false;
    }
:}

init with {: //  initialisation des variables
    declVars = new ArrayList<Type>();
    usedVars = new ArrayList<Type>();
    tabLengths = new ArrayList<Integer>();
    deepness = 0;
:}

terminal SEMIC, COMMA, EQUALS, LPAR, RPAR, ENUMTYPE;
terminal int INT;
terminal Float REAL;
terminal String ID;

non terminal P, D, Ss, T, L, I, S, E;

start with P;

P ::= D Ss                      {: :}
    ;

D ::= T:type L SEMIC            {: :}
    ;

T ::= ENUMTYPE                 {:  :}
    ;

L ::= L COMMA I:name            {:  :}
    | I:name                    {:  :}
    ;

I ::= ID:name                   {: :}
    | I:name LPAR INT RPAR   {: :}
    ;

Ss ::= Ss S {: :}
    |     S {: :}
    ;

S ::= ID:var1 EQUALS E SEMIC {: :}
    ;

E ::= I:name LPAR INT RPAR   {: :}
    | INT                       {:  :}
    | REAL                      {:  :}
    ;
