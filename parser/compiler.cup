import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;
import expression.*;
import identifiant.*;
import instruction.*;
import tac.*;

parser code {:
    public void syntax_error(Symbol cur_token) {
        System.err.println("----error----");
        System.err.println("line :"+ cur_token.left + " column :"+ cur_token.right);
        report_error("syntax_error", null);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntax_error(cur_token);
        System.err.println("----fin----");
    }
:}

action code {:
  HashMap tableVariable = new HashMap();
  Stack pileTableVariable = new Stack();
:}

init with {: :}

terminal IF, THEN, ELSE;
terminal FOR, WHILE, DO, RETURN;
terminal AND, OR, LT, GT, LE, GE, EQ, DIFF, NOT;
terminal PLUS, MINUS, TIMES, DIVIDE, MOD, NOT_U, POINTER_U;
terminal /*EQUALS,*/ AFFECT;
terminal LRBRA, RRBRA, LSBRA, RSBRA, SEMIC, COMMA, ENUM_TYPE, POINTER;
terminal RBRACE, LBRACE;
terminal INTER;
//Rounded bracket ( ) RBRA
//Square bracket [ ]  SBRA
//Brace  { } BRACES

terminal Integer INT;
terminal Float REAL;
terminal String ID, CHARACTER, CHARACTERS, BOOL;

non terminal beginning;

non terminal Instruction instruction,
                         affectation, declaration, enumeration,
                         bloc_instruction, procedure, increment,
                         instruction_if, instruction_while, instruction_for;
non terminal LinkedList<Instruction> liste_instruction;

non terminal Expression expression,
                        expression_variable, expression_valeur,
                        valeur_retour;
non terminal LinkedList<Expression> liste_expression;

precedence left AND, OR;
precedence left LT, GT, GE, LE, EQ, DIFF;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left MOD;
precedence left NOT_U, POINTER_U;
precedence right ELSE;

start with beginning;

beginning ::= beginning instruction:inst {: //Cas d'une déclaration : pas besoin de nouveau Label
                                            if (inst != null) {
                                                Label suivant = new Label();
                                                inst.genererCode(suivant, pileTableVariable);
                                                System.out.println("\n" + suivant + ":");
                                                IdentifiantRegistre.reinitialiser(); 
                                            } :}
            | /* Fin du parsing */       {: pileTableVariable.push(tableVariable); :}
            ;

//Les instructions.genererCode(null), permettent la gestion de type/vérification.
instruction ::= declaration:declInstruction                     {: RESULT = null; declInstruction.genererCode(null, pileTableVariable); :}
             |  affectation:affInstruction                      {: RESULT = affInstruction; :}
             |  enumeration:affEnumeration                      {: RESULT = null; affEnumeration.genererCode(null, pileTableVariable); :}
             |  instruction_for:forInstruction                  {: RESULT = forInstruction; :}
             |  instruction_while:whileInstruction              {: RESULT = whileInstruction; :}
             |  instruction_if:ifInstruction                    {: RESULT = ifInstruction; :}
             |  bloc_instruction:blocInstruction                {: RESULT = blocInstruction; :}
             |  procedure:procedureInstruction                  {: RESULT = procedureInstruction; :}
             ;

//TODO : rajouter le type dans le constructeur, test si liste_expression ne contient que des "type.variable"
declaration ::= ENUM_TYPE:type liste_expression:liste SEMIC                                {: RESULT = new Declaration((EnumType)type, liste); :}
             ;

affectation ::= ENUM_TYPE:type expression_variable:id AFFECT expression:exp SEMIC          {: RESULT = new Affectation((EnumType)type, id, exp); :}
             |  expression_variable:id AFFECT expression:exp SEMIC                    {: RESULT = new Affectation(null, id, exp); :}

             |  POINTER ENUM_TYPE:type expression_variable:id AFFECT expression:exp SEMIC  {: RESULT = new Affectation((EnumType)type, id, exp); :}
             ;

//Vérification de ENUM_TYPE == enum
enumeration ::= ENUM_TYPE:type expression_variable:id LBRACE liste_expression:list RBRACE SEMIC {: RESULT = new EnumerationOwn((EnumType)type, id, list); :}
             ;

instruction_if ::= IF expression:condition THEN                                       
                      instruction:blocIf
                      ELSE instruction:blocElse                                       {: RESULT = new IfThenElse(condition, blocIf, blocElse); :}

                |  IF expression:condition THEN
                      instruction:blocIf                                              {: System.out.println("DEBUT DU IF"); RESULT = new IfThen(condition, blocIf); :}
                ;

instruction_for ::= FOR LRBRA affectation:affect expression:condition SEMIC increment:inc RRBRA
                        instruction:blocFor                                           {: RESULT = new For(affect, condition, inc, blocFor); :}
                 ;


increment ::= expression_variable:id AFFECT expression:exp                            {: RESULT = new Affectation(null, id, exp); :}
           |
           ;

instruction_while ::= WHILE expression:condition
                         instruction:blocWhile                                        {: RESULT = new While(condition, blocWhile); :}
                   |  DO
                        instruction:blocWhile
                      WHILE expression:condition SEMIC                                {: RESULT = new DoWhile(blocWhile, condition); :}
                   ;


procedure ::= ID:nom LRBRA liste_expression:parametres RRBRA
                      bloc_instruction:blocInstruction
                      valeur_retour:ret                                               {: RESULT = new ProcedureDefinition(nom, parametres, blocInstruction, ret); :}
            | ID:nom LRBRA liste_expression:parametres RRBRA
                      bloc_instruction:blocInstruction                                {: RESULT = new ProcedureDefinition(nom, parametres, blocInstruction, null); :}
            | ID:nom LRBRA liste_expression:parametres RRBRA SEMIC                    {: RESULT = new ProcedureAppel(nom, parametres); :}
            ;

valeur_retour ::= RETURN expression:valeur SEMIC                                      {: RESULT = valeur; :}
               ;

bloc_instruction ::= LBRACE liste_instruction:bloc RBRACE                             {: RESULT = new BlocInstruction(bloc); :}
                  ;

liste_instruction ::= liste_instruction:list instruction:nouvelleInstruction          {: list.add(nouvelleInstruction); //append en fin de liste
                                                                                         RESULT = list;  :}
                   |                                                                  {: RESULT = new LinkedList<Instruction>(); :}
                   ;

liste_expression ::= liste_expression:list COMMA expression:exp                       {: list.add(exp); //append en fin de liste
                                                                                         RESULT = list; :}
                  |  expression:exp                                                   {: LinkedList l = new LinkedList<Expression>();
                                                                                         l.add(exp);
                                                                                         RESULT = l; :}
                  ;

expression ::= expression:e1 PLUS   expression:e2     {: RESULT = new ArithmetiqueBinaire(e1, e2, EnumOp.PLUS); :}
            |  expression:e1 MINUS  expression:e2     {: RESULT = new ArithmetiqueBinaire(e1, e2, EnumOp.MINUS); :}
            |  expression:e1 TIMES  expression:e2     {: RESULT = new ArithmetiqueBinaire(e1, e2, EnumOp.TIMES); :}
            |  expression:e1 DIVIDE expression:e2     {: RESULT = new ArithmetiqueBinaire(e1, e2, EnumOp.DIVIDE); :}
            |  expression:e1 MOD    expression:e2     {: RESULT = new ArithmetiqueBinaire(e1, e2, EnumOp.MOD); :}
            |  MINUS expression:exp                   {: RESULT = new ArithmetiqueUnaire(exp, EnumOp.MINUS); :}

            |  expression:e1 AND     expression:e2    {: RESULT = new AndBool(e1, e2);     :}
            |  expression:e1 OR      expression:e2    {: RESULT = new OrBool(e1, e2);      :}
            |  expression:e1 DIFF    expression:e2    {: RESULT = new ComparaisonBool(e1, e2, EnumOp.DIFF);    :}
            |  expression:e1 LT      expression:e2    {: RESULT = new ComparaisonBool(e1, e2, EnumOp.LT);      :}
            |  expression:e1 GT      expression:e2    {: RESULT = new ComparaisonBool(e1, e2, EnumOp.GT);      :}
            |  expression:e1 GE      expression:e2    {: RESULT = new ComparaisonBool(e1, e2, EnumOp.GE);      :}
            |  expression:e1 LE      expression:e2    {: RESULT = new ComparaisonBool(e1, e2, EnumOp.LE);      :}
            |  expression:e1 EQ      expression:e2    {: RESULT = new ComparaisonBool(e1, e2, EnumOp.EQUALS);  :}

            |  NOT expression:b                       {: RESULT = new NotBool(b); :} %prec NOT_U
            |  LRBRA expression:b RRBRA               {: RESULT = b; :}

            |  expression_variable:exp                {: RESULT = exp; :}
            |  expression_valeur:exp                  {: RESULT = exp; :}
            ;

expression_valeur ::= INT:nb                       {: RESULT = new Value(nb); :}
                   |  REAL:nb                      {: RESULT = new Value(nb); :}
                   |  BOOL:bool                    {: RESULT = new Value(Boolean.parseBoolean(bool)); :}
                   |  CHARACTERS:ch                {: RESULT = new CharacterMultiple(ch); :}
                   |  CHARACTER:ch                 {: RESULT = new CharacterUnique(ch); :}
                   ;

expression_variable ::= ID:id                                                   {: RESULT = new Variable(id); :}
                     |  ID:id LSBRA expression:exp RSBRA                        {: RESULT = new VariableTableau(id, exp); :}
                     |  ID:id LSBRA expression:exp1 INTER expression:exp2 RSBRA {: RESULT = new VariableIntervalle(id, exp1, exp2); :}
                     |  TIMES ID:id                                             {: RESULT = new Variable("*" + id); :} %prec POINTER_U
                     ;

