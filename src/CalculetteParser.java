
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 26 09:44:33 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 26 09:44:33 CET 2013
  */
public class CalculetteParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalculetteParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\004\003\000\002\007\003\000\002\007\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\036\007\042\004\001\002\000\020\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\027\ufffe\034\ufffe" +
    "\001\002\000\004\027\035\001\002\000\004\002\034\001" +
    "\002\000\004\042\004\001\002\000\004\027\011\001\002" +
    "\000\012\020\015\040\017\041\014\042\004\001\002\000" +
    "\016\017\022\020\023\021\025\022\024\023\021\034\033" +
    "\001\002\000\016\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\034\ufff5\001\002\000\016\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\034\ufffc\001\002\000\012\020\015\040" +
    "\017\041\014\042\004\001\002\000\016\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\034\ufff4\001\002\000\016\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\034\ufffd\001\002" +
    "\000\016\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\034" +
    "\ufff6\001\002\000\012\020\015\040\017\041\014\042\004" +
    "\001\002\000\012\020\015\040\017\041\014\042\004\001" +
    "\002\000\012\020\015\040\017\041\014\042\004\001\002" +
    "\000\012\020\015\040\017\041\014\042\004\001\002\000" +
    "\012\020\015\040\017\041\014\042\004\001\002\000\016" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\021\034\ufff9\001" +
    "\002\000\016\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\021" +
    "\034\ufff8\001\002\000\016\017\ufffa\020\ufffa\021\025\022" +
    "\024\023\021\034\ufffa\001\002\000\016\017\ufffb\020\ufffb" +
    "\021\025\022\024\023\021\034\ufffb\001\002\000\016\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\034\ufff7\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\012\020\015\040\017\041\014\042\004\001\002\000\016" +
    "\017\022\020\023\021\025\022\024\023\021\034\037\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\002\005\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\002\001\001\000\010\004\012\005\011\007" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\012\005\017\007\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\012\005\031\007\015\001\001\000\010\004\012\005" +
    "\030\007\015\001\001\000\010\004\012\005\027\007\015" +
    "\001\001\000\010\004\012\005\026\007\015\001\001\000" +
    "\010\004\012\005\025\007\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\012\005\035\007\015\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculetteParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculetteParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculetteParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

//Liste d'Instructions
//Table de variables HashMap <variable, type>
//Pile de HashMap<ListeInstruction, HashMap<variable, type>> à voir en détail

    }


    public void syntax_error(Symbol cur_token) {
        System.err.println("----error----");
        System.err.println("line :"+ cur_token.left + " column :"+ cur_token.right);
        report_error("syntax_error", null);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntax_error(cur_token);
        System.err.println("----fin----");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculetteParser$actions {


  int registreCourant = 0;
  boolean countOP = false; // Times, div
  boolean countMOD = false; // Mod
  int registreAvantTimes = -1; // Times, div et mod

  private final CalculetteParser parser;

  /** Constructor */
  CUP$CalculetteParser$actions(CalculetteParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculetteParser$do_action(
    int                        CUP$CalculetteParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculetteParser$parser,
    java.util.Stack            CUP$CalculetteParser$stack,
    int                        CUP$CalculetteParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculetteParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculetteParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression_arith ::= expression_numerique 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression_arith ::= expression_variable 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression_arith ::= MINUS expression_arith 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationArithmetique(exp, EnumOp.MINUS_U, registreCourant++);    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression_arith ::= expression_arith MOD expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.MOD,    registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.MOD, registreCourant++, countOP, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                            countOP = true; countMOD = true;
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression_arith ::= expression_arith DIVIDE expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.DIVIDE, registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.DIVIDE, registreCourant++, countOP, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                            countOP = true; countMOD = false;
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression_arith ::= expression_arith TIMES expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.TIMES,  registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.TIMES, registreCourant++, countOP, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                            countOP = true; countMOD = false;
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression_arith ::= expression_arith MINUS expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.MINUS,  registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.MINUS, registreCourant++, countOP, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                            countOP = false; countMOD = false;
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression_arith ::= expression_arith PLUS expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.PLUS,   registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.PLUS, registreCourant++, countOP, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                            countOP = false; countMOD = false;
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression_numerique ::= REAL 
            {
              Expression RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float nb = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new Value(nb); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_numerique",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression_numerique ::= INT 
            {
              Expression RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Integer nb = (Integer)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new Value(nb); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_numerique",5, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression_variable ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 Expression variable = new Variable(id);
                                      variable.verifier();
                                      RESULT = variable; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_variable",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // affectation ::= expression_variable AFFECT expression_arith SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).right;
		Expression id = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 Instruction aff = new Affectation(id, exp);
                                                                                       aff.verifier();
                                                                                       System.out.println(aff.evaluer(registreCourant - 1)); 
                                                                                    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("affectation",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // affectation ::= ENUM_TYPE expression_variable AFFECT expression_arith SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).right;
		Expression id = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 Instruction aff = new Affectation(id, exp);
                                                                                       aff.verifier();
                                                                                       //ajout du type dans une table de HashMap<variable, type>
                                                                                       System.out.println(aff.evaluer(registreCourant - 1)); 
                                                                                    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("affectation",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= affectation EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculetteParser$parser.done_parsing();
          return CUP$CalculetteParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

