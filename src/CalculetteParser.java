
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 26 17:15:57 CET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.Number;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 26 17:15:57 CET 2013
  */
public class CalculetteParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalculetteParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalculetteParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\002\007\000\002\002\006\000\002\004\016\000" +
    "\002\004\012\000\002\006\015\000\002\005\011\000\002" +
    "\010\003\000\002\010\006\000\002\013\003\000\002\013" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\004\000\002" +
    "\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\016\002\ufffc\004\010\007\005\010\004\043" +
    "\015\051\012\001\002\000\004\035\145\001\002\000\004" +
    "\035\133\001\002\000\020\002\ufffc\004\010\007\005\010" +
    "\004\043\015\045\ufffc\051\012\001\002\000\004\002\131" +
    "\001\002\000\004\035\057\001\002\000\020\002\ufffc\004" +
    "\010\007\005\010\004\043\015\045\ufffc\051\012\001\002" +
    "\000\046\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\034\ufff5\036\ufff5\037\053\040\ufff5\041\ufff5\001" +
    "\002\000\004\034\050\001\002\000\020\002\ufffc\004\010" +
    "\007\005\010\004\043\015\045\ufffc\051\012\001\002\000" +
    "\004\051\012\001\002\000\020\002\ufffc\004\010\007\005" +
    "\010\004\043\015\045\ufffc\051\012\001\002\000\006\002" +
    "\ufffd\045\ufffd\001\002\000\004\034\021\001\002\000\014" +
    "\025\026\035\022\047\030\050\025\051\012\001\002\000" +
    "\014\025\026\035\022\047\030\050\025\051\012\001\002" +
    "\000\016\024\033\025\034\026\036\027\035\030\032\041" +
    "\044\001\002\000\042\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\036\uffea\040\uffea\041\uffea\001\002" +
    "\000\042\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\036\ufff2\040\ufff2\041\ufff2\001\002\000\014\025" +
    "\026\035\022\047\030\050\025\051\012\001\002\000\042" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\036\uffe9\040\uffe9\041\uffe9\001\002\000\042\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\036\ufff3\040" +
    "\ufff3\041\ufff3\001\002\000\042\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\036\uffeb\040\uffeb\041\uffeb" +
    "\001\002\000\014\025\026\035\022\047\030\050\025\051" +
    "\012\001\002\000\014\025\026\035\022\047\030\050\025" +
    "\051\012\001\002\000\014\025\026\035\022\047\030\050" +
    "\025\051\012\001\002\000\014\025\026\035\022\047\030" +
    "\050\025\051\012\001\002\000\014\025\026\035\022\047" +
    "\030\050\025\051\012\001\002\000\042\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\032\036\uffef\040\uffef" +
    "\041\uffef\001\002\000\042\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\032\036\uffee\040\uffee\041\uffee\001" +
    "\002\000\042\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\024\ufff0\025\ufff0\026\036\027" +
    "\035\030\032\036\ufff0\040\ufff0\041\ufff0\001\002\000\042" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\024\ufff1\025\ufff1\026\036\027\035\030\032" +
    "\036\ufff1\040\ufff1\041\ufff1\001\002\000\042\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\036\uffed\040" +
    "\uffed\041\uffed\001\002\000\022\002\ufffb\004\ufffb\007\ufffb" +
    "\010\ufffb\041\ufffb\043\ufffb\045\ufffb\051\ufffb\001\002\000" +
    "\016\024\033\025\034\026\036\027\035\030\032\036\046" +
    "\001\002\000\042\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\036\uffec\040\uffec\041\uffec\001\002\000" +
    "\006\002\uffff\045\uffff\001\002\000\014\025\026\035\022" +
    "\047\030\050\025\051\012\001\002\000\016\024\033\025" +
    "\034\026\036\027\035\030\032\041\052\001\002\000\022" +
    "\002\ufffa\004\ufffa\007\ufffa\010\ufffa\041\ufffa\043\ufffa\045" +
    "\ufffa\051\ufffa\001\002\000\014\025\026\035\022\047\030" +
    "\050\025\051\012\001\002\000\016\024\033\025\034\026" +
    "\036\027\035\030\032\040\055\001\002\000\044\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\034\ufff4" +
    "\036\ufff4\040\ufff4\041\ufff4\001\002\000\006\002\000\045" +
    "\000\001\002\000\016\021\062\025\026\035\063\047\030" +
    "\050\025\051\012\001\002\000\014\011\111\012\112\017" +
    "\106\020\107\036\120\001\002\000\034\011\066\012\075" +
    "\013\074\014\072\015\071\016\067\017\070\020\073\024" +
    "\033\025\034\026\036\027\035\030\032\001\002\000\016" +
    "\021\062\025\026\035\063\047\030\050\025\051\012\001" +
    "\002\000\016\021\062\025\026\035\063\047\030\050\025" +
    "\051\012\001\002\000\014\011\111\012\112\017\106\020" +
    "\107\036\110\001\002\000\036\011\066\012\075\013\074" +
    "\014\072\015\071\016\067\017\070\020\073\024\033\025" +
    "\034\026\036\027\035\030\032\036\046\001\002\000\014" +
    "\025\026\035\022\047\030\050\025\051\012\001\002\000" +
    "\014\025\026\035\022\047\030\050\025\051\012\001\002" +
    "\000\014\025\026\035\022\047\030\050\025\051\012\001" +
    "\002\000\014\025\026\035\022\047\030\050\025\051\012" +
    "\001\002\000\014\025\026\035\022\047\030\050\025\051" +
    "\012\001\002\000\014\025\026\035\022\047\030\050\025" +
    "\051\012\001\002\000\014\025\026\035\022\047\030\050" +
    "\025\051\012\001\002\000\014\025\026\035\022\047\030" +
    "\050\025\051\012\001\002\000\030\011\uffe7\012\uffe7\017" +
    "\uffe7\020\uffe7\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe7\041\uffe7\001\002\000\030\011\uffe5\012\uffe5\017" +
    "\uffe5\020\uffe5\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe5\041\uffe5\001\002\000\030\011\uffe6\012\uffe6\017" +
    "\uffe6\020\uffe6\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe6\041\uffe6\001\002\000\030\011\uffe4\012\uffe4\017" +
    "\uffe4\020\uffe4\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe4\041\uffe4\001\002\000\030\011\uffe2\012\uffe2\017" +
    "\uffe2\020\uffe2\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe2\041\uffe2\001\002\000\030\011\uffe1\012\uffe1\017" +
    "\uffe1\020\uffe1\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe1\041\uffe1\001\002\000\030\011\uffe3\012\uffe3\017" +
    "\uffe3\020\uffe3\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe3\041\uffe3\001\002\000\030\011\uffe8\012\uffe8\017" +
    "\uffe8\020\uffe8\024\033\025\034\026\036\027\035\030\032" +
    "\036\uffe8\041\uffe8\001\002\000\016\021\062\025\026\035" +
    "\063\047\030\050\025\051\012\001\002\000\016\021\062" +
    "\025\026\035\063\047\030\050\025\051\012\001\002\000" +
    "\016\011\uffdb\012\uffdb\017\uffdb\020\uffdb\036\uffdb\041\uffdb" +
    "\001\002\000\016\021\062\025\026\035\063\047\030\050" +
    "\025\051\012\001\002\000\016\021\062\025\026\035\063" +
    "\047\030\050\025\051\012\001\002\000\016\011\uffdf\012" +
    "\uffdf\017\106\020\107\036\uffdf\041\uffdf\001\002\000\016" +
    "\011\uffe0\012\uffe0\017\106\020\107\036\uffe0\041\uffe0\001" +
    "\002\000\016\011\uffde\012\uffde\017\uffde\020\uffde\036\uffde" +
    "\041\uffde\001\002\000\016\011\uffdd\012\uffdd\017\uffdd\020" +
    "\uffdd\036\uffdd\041\uffdd\001\002\000\016\011\uffdc\012\uffdc" +
    "\017\uffdc\020\uffdc\036\uffdc\041\uffdc\001\002\000\004\005" +
    "\121\001\002\000\004\046\122\001\002\000\016\004\010" +
    "\007\005\010\004\043\015\045\ufffc\051\012\001\002\000" +
    "\004\045\124\001\002\000\022\002\ufff8\004\ufff8\006\125" +
    "\007\ufff8\010\ufff8\043\ufff8\045\ufff8\051\ufff8\001\002\000" +
    "\004\046\126\001\002\000\016\004\010\007\005\010\004" +
    "\043\015\045\ufffc\051\012\001\002\000\004\045\130\001" +
    "\002\000\020\002\ufff9\004\ufff9\007\ufff9\010\ufff9\043\ufff9" +
    "\045\ufff9\051\ufff9\001\002\000\004\002\001\001\002\000" +
    "\006\002\ufffe\045\ufffe\001\002\000\006\043\015\051\012" +
    "\001\002\000\004\041\135\001\002\000\016\021\062\025" +
    "\026\035\063\047\030\050\025\051\012\001\002\000\014" +
    "\011\111\012\112\017\106\020\107\041\137\001\002\000" +
    "\002\001\002\000\004\036\141\001\002\000\004\046\142" +
    "\001\002\000\016\004\010\007\005\010\004\043\015\045" +
    "\ufffc\051\012\001\002\000\004\045\144\001\002\000\020" +
    "\002\ufff7\004\ufff7\007\ufff7\010\ufff7\043\ufff7\045\ufff7\051" +
    "\ufff7\001\002\000\016\021\062\025\026\035\063\047\030" +
    "\050\025\051\012\001\002\000\014\011\111\012\112\017" +
    "\106\020\107\036\147\001\002\000\004\046\150\001\002" +
    "\000\016\004\010\007\005\010\004\043\015\045\ufffc\051" +
    "\012\001\002\000\004\045\152\001\002\000\020\002\ufff6" +
    "\004\ufff6\007\ufff6\010\ufff6\043\ufff6\045\ufff6\051\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\016\002\010\003\006\004\015\005\005\006" +
    "\013\010\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\010\003\131\004\015\005\005\006\013\010" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\010\003\055\004\015\005\005\006\013\010\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\010" +
    "\003\046\004\015\005\005\006\013\010\012\001\001\000" +
    "\004\010\017\001\001\000\016\002\010\003\016\004\015" +
    "\005\005\006\013\010\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\023\011\022\013\026\001\001" +
    "\000\010\010\023\011\044\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\023" +
    "\011\030\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\023\011\042\013\026" +
    "\001\001\000\010\010\023\011\041\013\026\001\001\000" +
    "\010\010\023\011\040\013\026\001\001\000\010\010\023" +
    "\011\037\013\026\001\001\000\010\010\023\011\036\013" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\023\011\050\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\023\011\053\013\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\023\011\060\012\057\013\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\023\011" +
    "\060\012\116\013\026\001\001\000\012\010\023\011\064" +
    "\012\063\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\023\011\104\013\026\001\001\000\010" +
    "\010\023\011\103\013\026\001\001\000\010\010\023\011" +
    "\102\013\026\001\001\000\010\010\023\011\101\013\026" +
    "\001\001\000\010\010\023\011\100\013\026\001\001\000" +
    "\010\010\023\011\077\013\026\001\001\000\010\010\023" +
    "\011\076\013\026\001\001\000\010\010\023\011\075\013" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\023" +
    "\011\060\012\115\013\026\001\001\000\012\010\023\011" +
    "\060\012\114\013\026\001\001\000\002\001\001\000\012" +
    "\010\023\011\060\012\113\013\026\001\001\000\012\010" +
    "\023\011\060\012\112\013\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\010\003\122\004\015\005\005\006\013\010\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\010\003\126\004\015\005\005\006\013\010" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\133\010\012\001" +
    "\001\000\002\001\001\000\012\010\023\011\060\012\135" +
    "\013\026\001\001\000\002\001\001\000\004\014\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\010" +
    "\003\142\004\015\005\005\006\013\010\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\023\011\060" +
    "\012\145\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\010\003\150\004\015\005\005\006\013" +
    "\010\012\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalculetteParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalculetteParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalculetteParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

//Liste d'Instructions
//Table de variables HashMap <variable, type>
//Pile de HashMap<ListeInstruction, HashMap<variable, type>> à voir en détail

    }


    public void syntax_error(Symbol cur_token) {
        System.err.println("----error----");
        System.err.println("line :"+ cur_token.left + " column :"+ cur_token.right);
        report_error("syntax_error", null);
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        syntax_error(cur_token);
        System.err.println("----fin----");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalculetteParser$actions {


  int registreCourant = 0;
  int registreAvantTimes = -1; // Times, div et mod

  private final CalculetteParser parser;

  /** Constructor */
  CUP$CalculetteParser$actions(CalculetteParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalculetteParser$do_action(
    int                        CUP$CalculetteParser$act_num,
    java_cup.runtime.lr_parser CUP$CalculetteParser$parser,
    java.util.Stack            CUP$CalculetteParser$stack,
    int                        CUP$CalculetteParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalculetteParser$result;

      /* select the action based on the action number */
      switch (CUP$CalculetteParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression_bool ::= LRBRA expression_bool RRBRA 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 RESULT = b;   
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression_bool ::= NOT expression_bool 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(b, EnumOp.NOT); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_bool ::= expression_bool EQ expression_bool 
            {
              Expression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression b1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression b2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(b1, b2, EnumOp.EQUALS);  
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_bool ::= expression_bool DIFF expression_bool 
            {
              Expression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression b1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression b2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(b1, b2, EnumOp.DIFF);    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_bool ::= expression_bool OR expression_bool 
            {
              Expression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression b1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression b2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(b1, b2, EnumOp.OR);      
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_bool ::= expression_bool AND expression_bool 
            {
              Expression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression b1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression b2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(b1, b2, EnumOp.AND);     
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression_bool ::= expression_arith EQ expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.EQUALS);  
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression_bool ::= expression_arith LE expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.LE);      
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression_bool ::= expression_arith GE expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.GE);      
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_bool ::= expression_arith GT expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.GT);      
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_bool ::= expression_arith LT expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.LT);      
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_bool ::= expression_arith DIFF expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.DIFF);    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression_bool ::= expression_arith OR expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.OR);      
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression_bool ::= expression_arith AND expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new OperationBooleenne(e1, e2, EnumOp.AND);     
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_bool",8, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression_arith ::= expression_numerique 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = exp; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_arith ::= expression_variable 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = exp; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression_arith ::= MINUS expression_arith 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(exp, EnumOp.MINUS_U, registreCourant);    
                                                                            int tmp = OperationArithmetique.genCodeUnaire(exp, EnumOp.MOD, registreCourant++, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression_arith ::= LRBRA expression_arith RRBRA 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		  RESULT = exp; 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression_arith ::= expression_arith MOD expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.MOD,    registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.MOD, registreCourant++, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_arith ::= expression_arith DIVIDE expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.DIVIDE, registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.DIVIDE, registreCourant++, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression_arith ::= expression_arith TIMES expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.TIMES,  registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.TIMES, registreCourant++, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression_arith ::= expression_arith MINUS expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.MINUS,  registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.MINUS, registreCourant++, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_arith ::= expression_arith PLUS expression_arith 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  RESULT = new OperationArithmetique(e1, e2, EnumOp.PLUS,   registreCourant); 
                                                                            int tmp = OperationArithmetique.genCode(e1, e2, EnumOp.PLUS, registreCourant++, registreAvantTimes); 
                                                                            if(tmp != -1) { registreAvantTimes = tmp; } 
                                                                        
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_arith",7, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_numerique ::= REAL 
            {
              Expression RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Float nb = (Float)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new Value(nb); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_numerique",9, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression_numerique ::= INT 
            {
              Expression RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		Integer nb = (Integer)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		 RESULT = new Value(nb); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_numerique",9, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression_variable ::= ID LSBRA expression_arith RSBRA 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 RESULT = new VariableTableau(id, exp); 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_variable",6, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression_variable ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.peek()).value;
		  Expression variable = new Variable(id);
                                        variable.verifier();
                                        RESULT = variable; 
                                    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("expression_variable",6, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction_while ::= WHILE LRBRA expression_bool RRBRA LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)).value;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction_while",3, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction_for ::= FOR LRBRA affectation SEMIC expression_bool SEMIC increment RRBRA LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-6)).value;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction_for",4, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-10)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction_if ::= IF LRBRA expression_bool RRBRA THEN LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)).value;
		int blocIfleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int blocIfright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Instruction blocIf = (Instruction)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 Instruction i = new IfThenElse(blocIf, condition);
                                                                                       Instructions all = new Instructions(i);
                                                                                       System.out.println(all.evaluer(0)); 
                                                                                    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction_if",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-7)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction_if ::= IF LRBRA expression_bool RRBRA THEN LBRACE instructions RBRACE ELSE LBRACE instructions RBRACE 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-9)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-9)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-9)).value;
		int blocIfleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)).left;
		int blocIfright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)).right;
		Instruction blocIf = (Instruction)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-5)).value;
		int blocElseleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int blocElseright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Instruction blocElse = (Instruction)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instruction_if",2, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-11)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // affectation ::= expression_variable AFFECT expression_arith SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).right;
		Expression id = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 Instruction aff = new Affectation(id, exp);
                                                                                       aff.verifier();
                                                                                       System.out.println(aff.evaluer(registreCourant - 1));
                                                                                       registreCourant = 0; 
                                                                                    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("affectation",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // affectation ::= ENUM_TYPE expression_variable AFFECT expression_arith SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).right;
		Expression id = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		 Instruction aff = new Affectation(id, exp);
                                                                                       aff.verifier();
                                                                                       //ajout du type dans une table de HashMap<variable, type>
                                                                                       System.out.println(aff.evaluer(registreCourant - 1));
                                                                                       registreCourant = 0; 
                                                                                    
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("affectation",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instructions ::= 
            {
              Instruction RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instructions ::= instruction_if instructions 
            {
              Instruction RESULT =null;
		 
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction_while instructions 
            {
              Instruction RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction_for instructions 
            {
              Instruction RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= affectation instructions 
            {
              Instruction RESULT =null;

              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          return CUP$CalculetteParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instructions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).right;
		Instruction start_val = (Instruction)((java_cup.runtime.Symbol) CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)).value;
		RESULT = start_val;
              CUP$CalculetteParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.elementAt(CUP$CalculetteParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalculetteParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalculetteParser$parser.done_parsing();
          return CUP$CalculetteParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

